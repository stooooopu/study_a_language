package programmers;
//문제 설명
//1937년 Collatz란 사람에 의해 제기된 이 추측은, 
//주어진 수가 1이 될때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다.
//1-1. 입력된 수가 짝수라면 2로 나눕니다. 
//1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다.
//2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다.
//예를 들어, 입력된 수가 6이라면 6→3→10→5→16→8→4→2→1 이 되어 총 8번 만에 1이 됩니다. 위 작업을 몇 번이나 반복해야하는지 반환하는 함수, solution을 완성해 주세요. 단, 작업을 500번을 반복해도 1이 되지 않는다면 –1을 반환해 주세요.
//제한 사항
//입력된 수, num은 1 이상 8000000 미만인 정수입니다.
//입출력 예
//n	result
//6			8
//16		4
//626331	-1
//입출력 예 #1
//문제의 설명과 같습니다.
//입출력 예 #2
//16 -> 8 -> 4 -> 2 -> 1 이되어 총 4번만에 1이 됩니다.
//입출력 예 #3
//626331은 500번을 시도해도 1이 되지 못하므로 -1을 리턴해야합니다.
public class 콜라츠_추측 {
    public static int solution(int num) {
        int answer = 0;
        long num1 = num;
        if(num1>=1&&num1<8000000) {
        while(true) {
        	if(num1%2==0) {
        		num1 = num1/2;
        		answer++;
        	}
        	if(num1%2!=0&&num1!=1) {
        		num1 = num1*3+1;
        		answer++;
        	}
        	if (num1==1) break;
        	if(answer>=500) return -1;
        }
     }
        return answer;
    }
    public static void main(String[] args) {
		int x=626331;
		x=solution(x);
		System.out.println(x);
	}
}
//처음에 int num으로 했을 때 626331이 -1이 아닌 488이 나옴
//그래서 디버그를 찍어 봤는데 솔직히 전부 본건 아니고 그냥 눌러봄
//어느순간 -가 나오고 숫자가 작아지더니 488번째에 1이 됨
//그래서 뭔가 아 얘가 숫자를 대충 셌나보다 해서
//long으로 타입을 바꿨더니 정답이 나옴
//역시 컴퓨터는 거짓말 안해